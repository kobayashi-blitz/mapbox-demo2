// Generated by view binder compiler. Do not edit!
package com.example.mapboxdemo2.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.mapboxdemo2.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogSearchMenuBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView historyLabel;

  @NonNull
  public final EditText keywordEditText;

  @NonNull
  public final RecyclerView keywordHistoryRecyclerView;

  @NonNull
  public final Button keywordSearchButton;

  @NonNull
  public final Button photoSearchButton;

  private DialogSearchMenuBinding(@NonNull LinearLayout rootView, @NonNull TextView historyLabel,
      @NonNull EditText keywordEditText, @NonNull RecyclerView keywordHistoryRecyclerView,
      @NonNull Button keywordSearchButton, @NonNull Button photoSearchButton) {
    this.rootView = rootView;
    this.historyLabel = historyLabel;
    this.keywordEditText = keywordEditText;
    this.keywordHistoryRecyclerView = keywordHistoryRecyclerView;
    this.keywordSearchButton = keywordSearchButton;
    this.photoSearchButton = photoSearchButton;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogSearchMenuBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogSearchMenuBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_search_menu, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogSearchMenuBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.historyLabel;
      TextView historyLabel = ViewBindings.findChildViewById(rootView, id);
      if (historyLabel == null) {
        break missingId;
      }

      id = R.id.keywordEditText;
      EditText keywordEditText = ViewBindings.findChildViewById(rootView, id);
      if (keywordEditText == null) {
        break missingId;
      }

      id = R.id.keywordHistoryRecyclerView;
      RecyclerView keywordHistoryRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (keywordHistoryRecyclerView == null) {
        break missingId;
      }

      id = R.id.keywordSearchButton;
      Button keywordSearchButton = ViewBindings.findChildViewById(rootView, id);
      if (keywordSearchButton == null) {
        break missingId;
      }

      id = R.id.photoSearchButton;
      Button photoSearchButton = ViewBindings.findChildViewById(rootView, id);
      if (photoSearchButton == null) {
        break missingId;
      }

      return new DialogSearchMenuBinding((LinearLayout) rootView, historyLabel, keywordEditText,
          keywordHistoryRecyclerView, keywordSearchButton, photoSearchButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
